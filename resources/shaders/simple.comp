#version 430

layout( local_size_x = 512 ) in;

layout( push_constant ) uniform params {
  uint len;
} PushConstant;

layout(std430, binding = 0) buffer Source
{
    float source[];
};

layout(std430, binding = 1) buffer Result
{
    float result[];
};

shared float part_sums[1024];

const int KERNEL_SIZE = 7;

void main()
{
    uint idx = gl_GlobalInvocationID.x;
    uint local_idx = gl_LocalInvocationID.x;
    uint group_size = gl_WorkGroupSize.x;

    part_sums[local_idx] = 0.0f;
    if (idx < PushConstant.len) {
        // Convolution
        for (int offset = -KERNEL_SIZE / 2; offset <= KERNEL_SIZE / 2; offset++) {
            int i = int(idx) + offset;
            if (i < 0 || i >= PushConstant.len) {
                continue;
            }

            part_sums[local_idx] += source[idx + offset];
        }

        part_sums[local_idx] /= KERNEL_SIZE;
        part_sums[local_idx] = source[idx] - part_sums[local_idx];

        // Sum (within each work group)
        // Wait all partial sums to be calculated
        barrier();

        for (uint i = group_size / 2; i > 0; i /= 2) {
            if (local_idx < i) {
                part_sums[local_idx] += part_sums[local_idx + i];
            }

            barrier();
        }

        if (local_idx == 0) {
            result[gl_WorkGroupID.x] = part_sums[0];
        }
    }
}
